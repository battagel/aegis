// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	minio "github.com/minio/minio-go/v7"
	mock "github.com/stretchr/testify/mock"

	tags "github.com/minio/minio-go/v7/pkg/tags"
)

// MinioClient is an autogenerated mock type for the MinioClient type
type MinioClient struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClient) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 *minio.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectTagging provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClient) GetObjectTagging(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectTaggingOptions) (*tags.Tags, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	var r0 *tags.Tags
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectTaggingOptions) (*tags.Tags, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectTaggingOptions) *tags.Tags); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tags.Tags)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectTaggingOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectTagging provides a mock function with given fields: ctx, bucketName, objectName, _a3, opts
func (_m *MinioClient) PutObjectTagging(ctx context.Context, bucketName string, objectName string, _a3 *tags.Tags, opts minio.PutObjectTaggingOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, _a3, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *tags.Tags, minio.PutObjectTaggingOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, _a3, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMinioClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMinioClient creates a new instance of MinioClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMinioClient(t mockConstructorTestingTNewMinioClient) *MinioClient {
	mock := &MinioClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
