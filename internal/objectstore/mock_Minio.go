// Code generated by mockery v2.23.1. DO NOT EDIT.

package objectstore

import mock "github.com/stretchr/testify/mock"

// MockMinio is an autogenerated mock type for the Minio type
type MockMinio struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: _a0, _a1
func (_m *MockMinio) GetObject(_a0 string, _a1 string) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectTagging provides a mock function with given fields: _a0, _a1
func (_m *MockMinio) GetObjectTagging(_a0 string, _a1 string) (map[string]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockMinio) PutObject(_a0 string, _a1 string, _a2 []byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutObjectTagging provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockMinio) PutObjectTagging(_a0 string, _a1 string, _a2 map[string]string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveObject provides a mock function with given fields: _a0, _a1
func (_m *MockMinio) RemoveObject(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMinio interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMinio creates a new instance of MockMinio. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMinio(t mockConstructorTestingTNewMockMinio) *MockMinio {
	mock := &MockMinio{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
